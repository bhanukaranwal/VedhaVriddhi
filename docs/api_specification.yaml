openapi: 3.0.1
info:
  title: VedhaVriddhi Universal Financial Intelligence API
  version: '4.0.0'
  description: |
    Complete API specification for the VedhaVriddhi Universal Financial Intelligence System Phase 4.
    
    This API provides access to quantum computing, AGI, DeFi, metaverse, climate intelligence, 
    neural interfaces, consciousness processing, and planetary impact services.
    
  contact:
    name: VedhaVriddhi Development Team
    email: dev@vedhavriddhi.ai
  license:
    name: VedhaVriddhi License
    url: https://vedhavriddhi.ai/license

servers:
  - url: https://api.vedhavriddhi.ai/v4
    description: Production server
  - url: https://staging-api.vedhavriddhi.ai/v4
    description: Staging server
  - url: http://localhost:8000
    description: Local development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []
  - BiometricAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BiometricAuth:
      type: http
      scheme: bearer
      bearerFormat: Biometric

  schemas:
    QuantumOptimizationRequest:
      type: object
      required:
        - portfolio
        - optimization_params
      properties:
        portfolio:
          type: object
          properties:
            assets:
              type: array
              items:
                type: string
              example: ["AAPL", "GOOGL", "TSLA"]
            expected_returns:
              type: array
              items:
                type: number
              example: [0.12, 0.15, 0.18]
            covariance_matrix:
              type: array
              items:
                type: array
                items:
                  type: number
            constraints:
              type: object
              properties:
                min_weight:
                  type: number
                  example: 0.0
                max_weight:
                  type: number
                  example: 0.5
                target_return:
                  type: number
                  example: 0.14
        optimization_params:
          type: object
          properties:
            algorithm:
              type: string
              enum: [QAOA, VQE, QSVM]
              example: QAOA
            layers:
              type: integer
              example: 3
            shots:
              type: integer
              example: 1024
            maxiter:
              type: integer
              example: 100

    QuantumOptimizationResult:
      type: object
      properties:
        success:
          type: boolean
        result:
          type: object
          properties:
            optimal_weights:
              type: array
              items:
                type: number
              example: [0.25, 0.35, 0.40]
            expected_return:
              type: number
              example: 0.145
            risk_level:
              type: number
              example: 0.089
            sharpe_ratio:
              type: number
              example: 1.63
            quantum_advantage:
              type: number
              example: 3.2
            execution_time_ms:
              type: number
              example: 2847

    AGIReasoningRequest:
      type: object
      required:
        - reasoning_type
        - premises
        - query
      properties:
        reasoning_type:
          type: string
          enum: [deductive, inductive, abductive, causal]
          example: deductive
        premises:
          type: array
          items:
            type: string
          example: 
            - "All technology stocks are volatile"
            - "AAPL is a technology stock"
        query:
          type: string
          example: "Is AAPL volatile?"
        context:
          type: object
          additionalProperties: true

    BiometricAuthRequest:
      type: object
      required:
        - user_id
        - biometric_type
        - biometric_data
      properties:
        user_id:
          type: string
          example: "user_12345"
        biometric_type:
          type: string
          enum: [fingerprint, facial, iris, voice, heartbeat]
          example: facial
        biometric_data:
          type: string
          format: base64
          description: Base64 encoded biometric data
        quality_threshold:
          type: number
          minimum: 0
          maximum: 1
          example: 0.8

paths:
  # Quantum Computing Service Endpoints
  /quantum/optimize:
    post:
      tags:
        - Quantum Computing
      summary: Optimize investment portfolio using quantum algorithms
      description: |
        Optimize an investment portfolio using quantum computing algorithms such as QAOA or VQE.
        Provides quantum advantage over classical optimization methods.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuantumOptimizationRequest'
      responses:
        '200':
          description: Optimization completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuantumOptimizationResult'
        '400':
          description: Invalid request parameters
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /quantum/simulate:
    post:
      tags:
        - Quantum Computing
      summary: Simulate quantum circuit
      description: Execute quantum circuit simulation on quantum backends
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                circuit:
                  type: object
                shots:
                  type: integer
                  example: 1024
                backend:
                  type: string
                  example: "qiskit_aer"
      responses:
        '200':
          description: Simulation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object

  # AGI Service Endpoints
  /agi/reason:
    post:
      tags:
        - Artificial General Intelligence
      summary: Submit reasoning request to AGI system
      description: Perform logical reasoning using advanced AGI capabilities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AGIReasoningRequest'
      responses:
        '200':
          description: Reasoning completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  reasoning:
                    type: object

  /agi/decide:
    post:
      tags:
        - Artificial General Intelligence
      summary: Multi-agent collective decision making
      description: Make complex decisions using collective intelligence from multiple AGI agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decision_context:
                  type: string
                options:
                  type: array
                  items:
                    type: string
                criteria:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Decision made
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  decision:
                    type: object

  # Neural Interface Service Endpoints
  /neural/biometric/authenticate:
    post:
      tags:
        - Neural Interface
      summary: Biometric authentication
      description: |
        Authenticate user using advanced biometric methods including emotional state analysis
        and stress level monitoring for trading clearance.
      security:
        - BiometricAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiometricAuthRequest'
      responses:
        '200':
          description: Authentication result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  authentication:
                    type: object
                    properties:
                      authenticated:
                        type: boolean
                      confidence:
                        type: number
                      emotional_state:
                        type: object
                      stress_level:
                        type: number
                      trading_clearance:
                        type: boolean

  # Consciousness Gateway Endpoints  
  /consciousness/synthesize:
    post:
      tags:
        - Consciousness Gateway
      summary: Synthesize collective consciousness
      description: Process and synthesize collective consciousness from multiple input streams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consciousness_inputs:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Consciousness synthesis result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  synthesis:
                    type: object

  # Climate Intelligence Endpoints
  /climate/carbon/footprint:
    get:
      tags:
        - Climate Intelligence
      summary: Get real-time carbon footprint
      description: Calculate real-time carbon footprint with automatic offset recommendations
      responses:
        '200':
          description: Carbon footprint data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  footprint:
                    type: object
                    properties:
                      total_emissions:
                        type: number
                      total_offsets:
                        type: number
                      net_emissions:
                        type: number
                      carbon_neutral:
                        type: boolean

  # System Health Endpoints
  /health:
    get:
      tags:
        - System
      summary: System health check
      description: Check health status of all services
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_health:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  service_health:
                    type: object
                    additionalProperties:
                      type: object

  /system/status:
    get:
      tags:
        - System
      summary: Comprehensive system status
      description: Get detailed system status including all capabilities
      responses:
        '200':
          description: System status
          content:
            application/json:
              schema:
                type: object
                properties:
                  system_name:
                    type: string
                  version:
                    type: string
                  quantum_consciousness_active:
                    type: boolean
                  planetary_regeneration_active:
                    type: boolean
                  capabilities:
                    type: object
